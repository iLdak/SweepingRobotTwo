<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\扫地机器人\SweepingRobotTwo\xr210soft普通\xr210soft.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\扫地机器人\SweepingRobotTwo\xr210soft普通\xr210soft.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 644]: Last Updated: Mon Jun 01 22:04:28 2015
<BR><P>
<H3>Maximum Stack Usage =        224 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Init_Mode &rArr; Do_Test &rArr; Test_MainBoard &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1df]">__user_initial_stackheap</a>
 <LI><a href="#[92]">__WFI</a>
 <LI><a href="#[91]">__WFE</a>
 <LI><a href="#[297]">__SEV</a>
 <LI><a href="#[298]">__ISB</a>
 <LI><a href="#[299]">__DSB</a>
 <LI><a href="#[29a]">__DMB</a>
 <LI><a href="#[29b]">__SVC</a>
 <LI><a href="#[29c]">__MRS_CONTROL</a>
 <LI><a href="#[29d]">__MSR_CONTROL</a>
 <LI><a href="#[29e]">__MRS_PSP</a>
 <LI><a href="#[29f]">__MSR_PSP</a>
 <LI><a href="#[2a0]">__MRS_MSP</a>
 <LI><a href="#[2a1]">__MSR_MSP</a>
 <LI><a href="#[6b]">__SETPRIMASK</a>
 <LI><a href="#[6d]">__RESETPRIMASK</a>
 <LI><a href="#[6f]">__SETFAULTMASK</a>
 <LI><a href="#[71]">__RESETFAULTMASK</a>
 <LI><a href="#[73]">__BASEPRICONFIG</a>
 <LI><a href="#[75]">__GetBASEPRI</a>
 <LI><a href="#[2a2]">__REV_HalfWord</a>
 <LI><a href="#[2a3]">__REV_Word</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[6]">BusFaultException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[21]">CAN_RX1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[22]">CAN_SCE_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[17]">DMAChannel1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[18]">DMAChannel2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[19]">DMAChannel3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1a]">DMAChannel4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1b]">DMAChannel5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1c]">DMAChannel6_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1d]">DMAChannel7_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[9]">DebugMonitor</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[4]">HardFaultException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[5]">MemManageException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3]">NMIException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[a]">PendSVC</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[35]">RTCAlarm_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[f]">RTC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3d]">Read_Charge_Dc</a> from hardware.o(.text) referenced from key.o(.text)
 <LI><a href="#[3e]">Read_Charge_Seat</a> from hardware.o(.text) referenced from key.o(.text)
 <LI><a href="#[38]">Read_Key1</a> from hardware.o(.text) referenced from key.o(.text)
 <LI><a href="#[39]">Read_Key2</a> from hardware.o(.text) referenced from key.o(.text)
 <LI><a href="#[3a]">Read_Key3</a> from hardware.o(.text) referenced from key.o(.text)
 <LI><a href="#[40]">Read_L_Bump</a> from hardware.o(.text) referenced from key.o(.text)
 <LI><a href="#[42]">Read_L_HW</a> from hardware.o(.text) referenced from hwincept.o(.text)
 <LI><a href="#[3b]">Read_L_LIDI</a> from hardware.o(.text) referenced from key.o(.text)
 <LI><a href="#[44]">Read_M_HW</a> from hardware.o(.text) referenced from hwincept.o(.text)
 <LI><a href="#[41]">Read_R_Bump</a> from hardware.o(.text) referenced from key.o(.text)
 <LI><a href="#[43]">Read_R_HW</a> from hardware.o(.text) referenced from hwincept.o(.text)
 <LI><a href="#[3c]">Read_R_LIDI</a> from hardware.o(.text) referenced from key.o(.text)
 <LI><a href="#[3f]">Read_S_Current</a> from hardware.o(.text) referenced from key.o(.text)
 <LI><a href="#[45]">Read_Up_HW</a> from hardware.o(.text) referenced from hwincept.o(.text)
 <LI><a href="#[2]">Reset_Handler</a> from stm32f10x_vector.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[8]">SVCHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[b]">SysTickHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[e]">TAMPER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[25]">TIM1_UP_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[36]">USBWakeUp_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1f]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[20]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[7]">UsageFaultException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[46]">__main</a> from __main.o(!!!main) referenced from stm32f10x_vector.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[46]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[47]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[49]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e4]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1e5]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1e6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[53]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1fa]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1fb]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1fc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1fd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1fe]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1ff]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[48]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[200]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[201]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Init_Mode &rArr; Do_Test &rArr; Test_MainBoard &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[202]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1e0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[52]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[203]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[54]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[56]"></a>ADC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[152]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[204]"></a>ADC_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
</UL>

<P><STRONG><a name="[154]"></a>ADC_DMACmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[155]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[157]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[158]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[159]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[15a]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[9c]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[205]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[208]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>ADC_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>BKP_DeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[21c]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>BKP_ITConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakErr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBatteryCapability
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFDCap
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePreengage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakBatteryChargeTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakBatteryActivation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[16c]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakErr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPMode
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPSpeed
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPUV
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePreengage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPPreengageTime
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPPreengageDate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPCapability
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPFdCap
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPBatteryChargeForbid
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBakBatteryChargeTime
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBakErr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBakBatteryActivation
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakBatteryActivation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[221]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>BKP_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>BKP_GetITStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>

<P><STRONG><a name="[5a]"></a>DMA_DeInit</STRONG> (Thumb, 136 bytes, Stack size 4 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[151]"></a>DMA_Init</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
</UL>

<P><STRONG><a name="[225]"></a>DMA_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>DMA_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>DMA_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>DMA_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>EXTI_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>EXTI_Init</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[22d]"></a>EXTI_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_rx
</UL>

<P><STRONG><a name="[22e]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>EXTI_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[e9]"></a>FLASH_SetLatency</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[230]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[193]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
</UL>

<P><STRONG><a name="[231]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>FLASH_GetStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5c]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[5f]"></a>FLASH_ErasePage</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
</UL>

<P><STRONG><a name="[60]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[61]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[62]"></a>FLASH_ProgramWord</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[63]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
</UL>

<P><STRONG><a name="[64]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[65]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[66]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[67]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[232]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>FLASH_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
</UL>

<P><STRONG><a name="[68]"></a>GPIO_DeInit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[69]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[12f]"></a>GPIO_Init</STRONG> (Thumb, 182 bytes, Stack size 28 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SDIO_in
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SDIO_out
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105hardware
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ad
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Hardware
</UL>

<P><STRONG><a name="[238]"></a>GPIO_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_S_Current
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_R_LIDI
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_R_Bump
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_L_LIDI
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_L_Bump
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Charge_Seat
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Charge_Dc
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LCD_Data
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_R_Speed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_L_Speed
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Front_Wheel
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Up_HW
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_R_HW
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_M_HW
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_L_HW
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dui_Telecontrol_ID
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
</UL>

<P><STRONG><a name="[239]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Stb
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Power
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Data
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Clk
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_BG
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UV
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Speed_Send
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_S_Motor
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_ZNMOS
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_FNMOS
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Dust_Motor
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Beep
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_R_BackOnOff
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_R_FrontOnOff
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_L_BackOnOff
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_L_FrontOnOff
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_FPMOS
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_ZPMOS
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HW_Power
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Wall_Send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Earth_Send
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadFIFO
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteFIFO
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadID
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadReg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteReg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send4Bit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105hardware
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Hardware
</UL>

<P><STRONG><a name="[114]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Stb
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Power
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Data
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Clk
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_BG
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_UV
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Speed_Send
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_S_Motor
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_ZPMOS
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_FPMOS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Dust_Motor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Beep
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_R_BackOnOff
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_R_FrontOnOff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_L_BackOnOff
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_L_FrontOnOff
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_FNMOS
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_ZNMOS
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_HW_Power
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Wall_Send
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Earth_Send
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadFIFO
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteFIFO
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadID
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadReg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteReg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send4Bit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105hardware
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfWheel
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Hardware
</UL>

<P><STRONG><a name="[23c]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[23e]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[bd]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_key
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[240]"></a>NVIC_DeInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>NVIC_SCBDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[be]"></a>NVIC_Init</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, stm32f10x_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_key
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_time
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[242]"></a>NVIC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>NVIC_SETPRIMASK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SETPRIMASK
</UL>

<P><STRONG><a name="[6c]"></a>NVIC_RESETPRIMASK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESETPRIMASK
</UL>

<P><STRONG><a name="[6e]"></a>NVIC_SETFAULTMASK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SETFAULTMASK
</UL>

<P><STRONG><a name="[70]"></a>NVIC_RESETFAULTMASK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESETFAULTMASK
</UL>

<P><STRONG><a name="[72]"></a>NVIC_BASEPRICONFIG</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BASEPRICONFIG
</UL>

<P><STRONG><a name="[74]"></a>NVIC_GetBASEPRI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetBASEPRI
</UL>

<P><STRONG><a name="[243]"></a>NVIC_GetCurrentPendingIRQChannel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>NVIC_GetIRQChannelPendingBitStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>NVIC_SetIRQChannelPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>NVIC_ClearIRQChannelPendingBit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>NVIC_GetCurrentActiveHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>NVIC_GetIRQChannelActiveBitStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>NVIC_GetCPUID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[94]"></a>NVIC_GenerateSystemReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFaultException
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManageException
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultException
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFaultException
</UL>

<P><STRONG><a name="[24a]"></a>NVIC_GenerateCoreReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>NVIC_SystemHandlerConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>NVIC_SystemHandlerPriorityConfig</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>NVIC_GetSystemHandlerPendingBitStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>NVIC_SetSystemHandlerPendingBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>NVIC_ClearSystemHandlerPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>NVIC_GetSystemHandlerActiveBitStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>NVIC_GetFaultHandlerSources</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>NVIC_GetFaultAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>RCC_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[e7]"></a>RCC_HSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[77]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EXITSTOP
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[76]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[254]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>RCC_PLLConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ee]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EXITSTOP
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ef]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EXITSTOP
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f0]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EXITSTOP
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ea]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ec]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[eb]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[256]"></a>RCC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>RCC_LSEConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[259]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[175]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[25a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ad
</UL>

<P><STRONG><a name="[12e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105hardware
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ad
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Hardware
</UL>

<P><STRONG><a name="[15c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_time
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[57]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[7e]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[59]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[25b]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[25d]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>RTC_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[79]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[7a]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[ff]"></a>RTC_GetCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRealTime
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>RTC_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRtcTime
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[7b]"></a>RTC_SetPrescaler</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[7c]"></a>RTC_SetAlarm</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
</UL>

<P><STRONG><a name="[25f]"></a>RTC_GetDivider</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRtcTime
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[176]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[260]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>RTC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>RTC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>TIM_DeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[15d]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_time
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[15e]"></a>TIM_OCInit</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[83]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMI_Config
</UL>

<P><STRONG><a name="[81]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMI_Config
</UL>

<P><STRONG><a name="[86]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[88]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[84]"></a>TIM_ICInit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMI_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>

<P><STRONG><a name="[262]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>TIM_OCStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>TIM_ICStructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>TIM_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_time
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[16a]"></a>TIM_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_time
</UL>

<P><STRONG><a name="[265]"></a>TIM_DMAConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>TIM_DMACmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[89]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[8b]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>

<P><STRONG><a name="[8d]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[8c]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[8e]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[268]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[26e]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[162]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[163]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[164]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[26f]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>TIM_GenerateEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pwm
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
</UL>

<P><STRONG><a name="[168]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pwm
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
</UL>

<P><STRONG><a name="[166]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pwm
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
</UL>

<P><STRONG><a name="[167]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pwm
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
</UL>

<P><STRONG><a name="[286]"></a>TIM_SetClockDivision</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>TIM_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>TIM_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
</UL>

<P><STRONG><a name="[196]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
</UL>

<P><STRONG><a name="[197]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
</UL>

<P><STRONG><a name="[11b]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Display
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRealTime
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
</UL>

<P><STRONG><a name="[290]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[172]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakErr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBatteryCapability
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFDCap
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRtcTime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePreengage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakBatteryChargeTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakBatteryActivation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[292]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WFI
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WFE
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
</UL>

<P><STRONG><a name="[93]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WFI
</UL>

<P><STRONG><a name="[295]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_vector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_vector.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[92]"></a>__WFI</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTANDBYMode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[91]"></a>__WFE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[297]"></a>__SEV</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>__ISB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>__DSB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>__DMB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>__SVC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>__MRS_CONTROL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>__MSR_CONTROL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__MRS_PSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>__MSR_PSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>__MRS_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>__MSR_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__SETPRIMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SETPRIMASK
</UL>

<P><STRONG><a name="[6d]"></a>__RESETPRIMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_RESETPRIMASK
</UL>

<P><STRONG><a name="[6f]"></a>__SETFAULTMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SETFAULTMASK
</UL>

<P><STRONG><a name="[71]"></a>__RESETFAULTMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_RESETFAULTMASK
</UL>

<P><STRONG><a name="[73]"></a>__BASEPRICONFIG</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_BASEPRICONFIG
</UL>

<P><STRONG><a name="[75]"></a>__GetBASEPRI</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetBASEPRI
</UL>

<P><STRONG><a name="[2a2]"></a>__REV_HalfWord</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>__REV_Word</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GenerateSystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManageException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GenerateSystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GenerateSystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GenerateSystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = EXTI0_IRQHandler &rArr; init_a7105 &rArr; A7105_WriteID &rArr; A7105_ReadID &rArr; ByteRead &rArr; set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ADC_IRQHandler &rArr; ReInitAd &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TIM2_IRQHandler &rArr; ReInitAd &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hw_data
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dummy_wall
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTCAlarm_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>Init_Io_Driver</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, io_drive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_ZNMOS
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_FNMOS
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_UV
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_S_Motor
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_ZPMOS
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_FPMOS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Dust_Motor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[ac]"></a>Io_Driver</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, io_drive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Io_Driver &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UV
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_S_Motor
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_Motor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Dust_Motor
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_UV
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_S_Motor
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_Motor
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Dust_Motor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Current
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Action
</UL>

<P><STRONG><a name="[b3]"></a>Enable_Beep_Five</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, io_drive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_Beep_Five
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[b5]"></a>Enable_Beep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, io_drive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_Beep
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_YaoKong_Manage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Docking_YaoKong_Manage
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sweep_YaoKong_Manage
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_YaoKong_Manage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Err
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
</UL>

<P><STRONG><a name="[b6]"></a>Enable_Beep_number</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, io_drive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_Beep_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
</UL>

<P><STRONG><a name="[b7]"></a>Beep_Driver</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, io_drive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Beep_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Beep
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>Enable_Speed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, io_drive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Speed_Send
</UL>

<P><STRONG><a name="[ba]"></a>Disable_Speed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, io_drive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Speed_Send
</UL>

<P><STRONG><a name="[bc]"></a>init_key</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = init_key &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[c1]"></a>read_scurrent</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_scurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReadKey
</UL>

<P><STRONG><a name="[c0]"></a>read_key</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_key
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReadKey
</UL>

<P><STRONG><a name="[bf]"></a>AutoReadKey</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AutoReadKey &rArr; read_key
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_scurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Display
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disdata
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteCommand
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadReg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteReg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send4Bit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ring
</UL>

<P><STRONG><a name="[c2]"></a>Lcd_WriteCommand</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, lcdkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Lcd_WriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Stb
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Data
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Clk
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Stb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Data
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Clk
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_dison
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disoff
</UL>

<P><STRONG><a name="[ca]"></a>lcdkey_disoff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcdkey_disoff &rArr; Lcd_WriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[cb]"></a>lcdkey_bgoff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_BG
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[cd]"></a>lcdkey_disdata</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, lcdkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcdkey_disdata
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Stb
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Data
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Clk
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Stb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Data
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Clk
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Display
</UL>

<P><STRONG><a name="[dd]"></a>dis_disPower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[dc]"></a>dis_disSpeed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[db]"></a>dis_disWeek</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[da]"></a>dis_disMinute</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[d9]"></a>dis_disHour</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[d8]"></a>dis_disPreengage</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[d7]"></a>dis_Power</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[d6]"></a>dis_Speed</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, lcdkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dis_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[d5]"></a>dis_Week</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[d4]"></a>dis_Minute</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, lcdkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dis_Minute
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[d3]"></a>dis_Hour</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lcdkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dis_Hour
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[d2]"></a>dis_Preengage</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
</UL>

<P><STRONG><a name="[ce]"></a>lcdkey_dison</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcdkey_dison &rArr; Lcd_WriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Display
</UL>

<P><STRONG><a name="[cf]"></a>lcdkey_bgon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_BG
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Display
</UL>

<P><STRONG><a name="[d1]"></a>AutoDisplay</STRONG> (Thumb, 662 bytes, Stack size 24 bytes, lcdkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AutoDisplay &rArr; lcdkey_disdata
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_bgon
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_dison
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_Preengage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_Hour
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_Minute
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_Week
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_Speed
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_Power
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_disPreengage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_disHour
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_disMinute
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_disWeek
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_disSpeed
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_disPower
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disdata
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_bgoff
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disoff
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>clr_display</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>

<P><STRONG><a name="[de]"></a>Init_Lcd</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lcdkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_Lcd &rArr; Lcd_WriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Stb
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Power
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Data
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Clk
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_BG
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_LCD_Power
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteCommand
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[11a]"></a>Clr_DisplayData</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcdkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Display
</UL>

<P><STRONG><a name="[e2]"></a>NVIC_Configuration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[e5]"></a>RCC_Configuration</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[f1]"></a>Init_System</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Init_System &rArr; initRF &rArr; init_a7105 &rArr; A7105_WriteID &rArr; A7105_ReadID &rArr; ByteRead &rArr; set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_key
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLockConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wallearth
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_time
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hwincept
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ad
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_WatchDog
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ring
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Hardware
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = main &rArr; Init_Mode &rArr; Do_Test &rArr; Test_MainBoard &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReadKey
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Driver
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampling_temp_voltage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wallearth
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_charge
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRealTime
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountCapability
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_rx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2a4]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>init_power</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_power &rArr; account_current
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;account_current
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[108]"></a>ChargeControl</STRONG> (Thumb, 1082 bytes, Stack size 40 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ChargeControl &rArr; Init_Err &rArr; Init_Cease &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;account_current
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakBatteryChargeTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakBatteryActivation
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chargeing
</UL>

<P><STRONG><a name="[10e]"></a>chargeing</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = chargeing &rArr; ChargeControl &rArr; Init_Err &rArr; Init_Cease &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeControl
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Current
</UL>

<P><STRONG><a name="[103]"></a>judge_charge</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = judge_charge
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>sampling_temp_voltage</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sampling_temp_voltage &rArr; account_current
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;account_current
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a5]"></a>Get_BatteryTemp</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>Init_Ring</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_Ring &rArr; account_current
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;account_current
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[10f]"></a>stop</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfBrush
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfWheel
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
</UL>

<P><STRONG><a name="[112]"></a>subbtime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
</UL>

<P><STRONG><a name="[111]"></a>comm_rap</STRONG> (Thumb, 784 bytes, Stack size 40 bytes, ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = comm_rap &rArr; enable_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subbtime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;account_current
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Current
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Action
</UL>

<P><STRONG><a name="[113]"></a>Test_DriveOfWheel</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pwm
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;account_current
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
</UL>

<P><STRONG><a name="[116]"></a>enable_rap</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfWheel
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSeat
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;louxuan
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_road
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frontandback
</UL>

<P><STRONG><a name="[117]"></a>stop_rap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stop_rap &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_border
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSeat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongFangXiang
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_bump
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_earth
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sideearth
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Protect
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Protect
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
</UL>

<P><STRONG><a name="[118]"></a>Test_DriveOfBrush</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Test_DriveOfBrush &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_ZNMOS
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_Motor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_FNMOS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_ZPMOS
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_Motor
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_FPMOS
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;account_current
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
</UL>

<P><STRONG><a name="[119]"></a>Test_Display</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Test_Display &rArr; lcdkey_disdata
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_DisplayData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_bgon
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_dison
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disdata
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReadKey
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[11c]"></a>frontandback</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = frontandback &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Action
</UL>

<P><STRONG><a name="[11d]"></a>Test_Action</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Test_Action &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frontandback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[11f]"></a>Test_Current</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Test_Current &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;account_current
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chargeing
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[12c]"></a>Test_KeyAndYaoKong</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[12b]"></a>Test_HwIncept</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Test_HwIncept
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[12a]"></a>Test_Wall</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Test_Wall
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[129]"></a>Test_Earth</STRONG> (Thumb, 276 bytes, Stack size 20 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Test_Earth
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[120]"></a>Test_MainBoard</STRONG> (Thumb, 1626 bytes, Stack size 40 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Test_MainBoard &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_DisplayData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_bgon
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_dison
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disdata
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReadKey
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep_number
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfBrush
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfWheel
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[121]"></a>Do_Test</STRONG> (Thumb, 1026 bytes, Stack size 48 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Do_Test &rArr; Test_MainBoard &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReadKey
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Speed_Send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Driver
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hwincept
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_hw_effect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBakErr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBakBatteryActivation
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_earth
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Earth
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Wall
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_HwIncept
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_KeyAndYaoKong
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Current
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Display
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakBatteryActivation
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chargeing
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampling_temp_voltage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wallearth
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_charge
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[12d]"></a>init_a7105hardware</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = init_a7105hardware &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[130]"></a>Send4Bit</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Send4Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCmd
</UL>

<P><STRONG><a name="[99]"></a>StrobeCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StrobeCmd &rArr; Send4Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send4Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dui_Telecontrol_ID
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_rx_en
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[131]"></a>A7105_WriteReg</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = A7105_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_Reset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_Config
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCH
</UL>

<P><STRONG><a name="[132]"></a>SetCH</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetCH &rArr; A7105_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_rx_en
</UL>

<P><STRONG><a name="[133]"></a>A7105_rx_en</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = A7105_rx_en &rArr; StrobeCmd &rArr; Send4Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCH
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105
</UL>

<P><STRONG><a name="[134]"></a>set_SDIO_out</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = set_SDIO_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadReg
</UL>

<P><STRONG><a name="[135]"></a>set_SDIO_in</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadReg
</UL>

<P><STRONG><a name="[136]"></a>A7105_ReadReg</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = A7105_ReadReg &rArr; set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SDIO_in
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SDIO_out
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105
</UL>

<P><STRONG><a name="[137]"></a>A7105_Config</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = A7105_Config &rArr; A7105_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105
</UL>

<P><STRONG><a name="[138]"></a>ByteRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ByteRead &rArr; set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SDIO_in
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SDIO_out
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadFIFO
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadID
</UL>

<P><STRONG><a name="[139]"></a>ByteSend</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ByteSend
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadFIFO
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteFIFO
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadID
</UL>

<P><STRONG><a name="[13a]"></a>A7105_ReadID</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = A7105_ReadID &rArr; ByteRead &rArr; set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteID
</UL>

<P><STRONG><a name="[13b]"></a>A7105_WriteID</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = A7105_WriteID &rArr; A7105_ReadID &rArr; ByteRead &rArr; set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadID
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105
</UL>

<P><STRONG><a name="[13c]"></a>A7105_Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = A7105_Reset &rArr; A7105_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105
</UL>

<P><STRONG><a name="[98]"></a>init_a7105</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = init_a7105 &rArr; A7105_WriteID &rArr; A7105_ReadID &rArr; ByteRead &rArr; set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_Reset
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteID
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_Config
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_ReadReg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_rx_en
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[97]"></a>RxPacket</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RxPacket &rArr; ByteRead &rArr; set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dui_Telecontrol_ID
</UL>

<P><STRONG><a name="[13d]"></a>dui_Telecontrol_ID</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dui_Telecontrol_ID &rArr; RxPacket &rArr; ByteRead &rArr; set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPacket
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[fc]"></a>initRF</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = initRF &rArr; init_a7105 &rArr; A7105_WriteID &rArr; A7105_ReadID &rArr; ByteRead &rArr; set_SDIO_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Beep
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Beep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flash
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dui_Telecontrol_ID
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105hardware
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[142]"></a>A7105_WriteFIFO</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, a7105.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
</UL>

<P><STRONG><a name="[143]"></a>A7105_ReadFIFO</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, a7105.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
</UL>

<P><STRONG><a name="[105]"></a>A7105_rx</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, a7105.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = A7105_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>init_wallearth</STRONG> (Thumb, 166 bytes, Stack size 28 bytes, wall_earth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = init_wallearth
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[146]"></a>check_near</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, wall_earth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_near
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wallearth
</UL>

<P><STRONG><a name="[145]"></a>check_earth</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, wall_earth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_earth
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wallearth
</UL>

<P><STRONG><a name="[106]"></a>read_wallearth</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, wall_earth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_wallearth &rArr; check_earth
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Wall_Send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Earth_Send
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Wall_Send
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Earth_Send
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_earth
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_near
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;account_current
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>Enable_earth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wall_earth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[123]"></a>Enable_wall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wall_earth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border_child
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_border
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_bump
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[1bf]"></a>Disable_earth</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wall_earth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>

<P><STRONG><a name="[1bc]"></a>Disable_wall</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, wall_earth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Disable_wall
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>

<P><STRONG><a name="[1d2]"></a>Wall_SensitivityLow</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wall_earth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[1d3]"></a>Wall_SensitivityHigh</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wall_earth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[14b]"></a>disable_hwincept</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hwincept.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disable_hwincept
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HW_Power
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hwincept
</UL>

<P><STRONG><a name="[14d]"></a>clr_hw_struct</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hwincept.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hwincept
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hwincept
</UL>

<P><STRONG><a name="[f4]"></a>init_hwincept</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hwincept.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_hwincept &rArr; disable_hwincept
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_hw_struct
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_hwincept
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[14e]"></a>read_hw_bit</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, hwincept.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_hw_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hw_data
</UL>

<P><STRONG><a name="[9e]"></a>read_hw_data</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hwincept.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_hw_data &rArr; read_hw_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hw_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>read_dummy_wall_bit</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hwincept.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_dummy_wall_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dummy_wall
</UL>

<P><STRONG><a name="[9f]"></a>read_dummy_wall</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hwincept.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_dummy_wall &rArr; read_dummy_wall_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dummy_wall_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>clr_hw_effect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hwincept.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[124]"></a>enable_hwincept</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hwincept.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_hwincept
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_HW_Power
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_hw_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[9b]"></a>ReInitAd</STRONG> (Thumb, 418 bytes, Stack size 88 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ReInitAd &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ad
</UL>

<P><STRONG><a name="[f6]"></a>init_ad</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = init_ad &rArr; ReInitAd &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitAd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[107]"></a>account_current</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = account_current
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMDustMotor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Current
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfBrush
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfWheel
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeControl
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampling_temp_voltage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wallearth
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ring
</UL>

<P><STRONG><a name="[f5]"></a>Init_PWM</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_PWM &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[10d]"></a>enable_pwm</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enable_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeControl
</UL>

<P><STRONG><a name="[109]"></a>disable_pwm</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chargeing
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeControl
</UL>

<P><STRONG><a name="[115]"></a>Set_Pwm</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfWheel
</UL>

<P><STRONG><a name="[fb]"></a>init_time</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, time1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = init_time &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[af]"></a>DelayMs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, time1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_a7105
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSeat
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMDustMotor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfBrush
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfWheel
</UL>

<P><STRONG><a name="[16b]"></a>ReadBakBatteryChargeTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBakBatteryChargeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[125]"></a>ReadBakBatteryActivation</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBakBatteryActivation
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[16d]"></a>ReadBKPBatteryChargeForbid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBKPBatteryChargeForbid
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[16e]"></a>ReadBKPFdCap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBKPFdCap
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[16f]"></a>ReadBKPCapability</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBKPCapability
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[170]"></a>ReadBKPPreengageDate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBKPPreengageDate
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[171]"></a>ReadBKPPreengageTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[fa]"></a>init_rtc</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = init_rtc &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPPreengageTime
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPPreengageDate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPCapability
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPFdCap
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPBatteryChargeForbid
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBakBatteryChargeTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBakBatteryActivation
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[17a]"></a>WritePreengage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WritePreengage
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Save_Preengage
</UL>

<P><STRONG><a name="[17b]"></a>WriteRtcTime</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteRtcTime &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Save_Time
</UL>

<P><STRONG><a name="[17c]"></a>WriteWorkState</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteWorkState
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Speed
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_UV
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>

<P><STRONG><a name="[17d]"></a>ReadBKPUV</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBKPUV
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[17e]"></a>ReadBKPSpeed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBKPSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[17f]"></a>ReadBKPMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBKPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[180]"></a>WriteFDCap</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteFDCap
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountCapabilityReal
</UL>

<P><STRONG><a name="[181]"></a>WriteBatteryCapability</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteBatteryCapability
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountCapabilityReal
</UL>

<P><STRONG><a name="[101]"></a>ReadRealTime</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadRealTime
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>WriteBakErr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteBakErr
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>

<P><STRONG><a name="[128]"></a>ReadBakErr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBakErr
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[10c]"></a>WriteBakBatteryActivation</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteBakBatteryActivation
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeControl
</UL>

<P><STRONG><a name="[10b]"></a>WriteBakBatteryChargeTime</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteBakBatteryChargeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeControl
</UL>

<P><STRONG><a name="[f3]"></a>Init_Hardware</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, hardware.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Init_Hardware &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[ae]"></a>Set_S_Motor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
</UL>

<P><STRONG><a name="[183]"></a>Set_M_ZPMOS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_Motor
</UL>

<P><STRONG><a name="[184]"></a>Reset_M_ZNMOS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_Motor
</UL>

<P><STRONG><a name="[b0]"></a>Set_M_Motor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardware.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_M_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_ZNMOS
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_ZPMOS
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMDustMotor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfBrush
</UL>

<P><STRONG><a name="[a8]"></a>Reset_M_ZPMOS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_Motor
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfBrush
</UL>

<P><STRONG><a name="[aa]"></a>Set_M_ZNMOS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_Motor
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfBrush
</UL>

<P><STRONG><a name="[b1]"></a>Reset_M_Motor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardware.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reset_M_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_ZNMOS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_M_ZPMOS
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfBrush
</UL>

<P><STRONG><a name="[ad]"></a>Set_UV</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
</UL>

<P><STRONG><a name="[185]"></a>Set_M_FPMOS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[a9]"></a>Set_M_FNMOS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfBrush
</UL>

<P><STRONG><a name="[b2]"></a>Set_Dust_Motor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMDustMotor
</UL>

<P><STRONG><a name="[b4]"></a>Set_Beep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Driver
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep_number
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep_Five
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[147]"></a>Set_Wall_Send</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wallearth
</UL>

<P><STRONG><a name="[c9]"></a>Set_LCD_Stb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disdata
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteCommand
</UL>

<P><STRONG><a name="[df]"></a>Set_LCD_Power</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
</UL>

<P><STRONG><a name="[c7]"></a>Set_LCD_Clk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disdata
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteCommand
</UL>

<P><STRONG><a name="[c6]"></a>Set_LCD_Data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disdata
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteCommand
</UL>

<P><STRONG><a name="[cc]"></a>Set_LCD_BG</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_bgoff
</UL>

<P><STRONG><a name="[bb]"></a>Set_Speed_Send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Speed
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>

<P><STRONG><a name="[148]"></a>Set_Earth_Send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wallearth
</UL>

<P><STRONG><a name="[186]"></a>Set_L_FrontOnOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[187]"></a>Set_L_BackOnOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[188]"></a>Set_R_FrontOnOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[189]"></a>Set_R_BackOnOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[14c]"></a>Set_HW_Power</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_hwincept
</UL>

<P><STRONG><a name="[a5]"></a>Reset_S_Motor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
</UL>

<P><STRONG><a name="[a4]"></a>Reset_UV</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
</UL>

<P><STRONG><a name="[a7]"></a>Reset_M_FPMOS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DriveOfBrush
</UL>

<P><STRONG><a name="[18a]"></a>Reset_M_FNMOS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[a6]"></a>Reset_Dust_Motor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
</UL>

<P><STRONG><a name="[ab]"></a>Reset_Beep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Driver
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[149]"></a>Reset_Wall_Send</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wallearth
</UL>

<P><STRONG><a name="[c3]"></a>Reset_LCD_Stb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disdata
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteCommand
</UL>

<P><STRONG><a name="[e0]"></a>Reset_LCD_Power</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
</UL>

<P><STRONG><a name="[c5]"></a>Reset_LCD_Clk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disdata
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteCommand
</UL>

<P><STRONG><a name="[c8]"></a>Reset_LCD_Data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_disdata
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteCommand
</UL>

<P><STRONG><a name="[d0]"></a>Reset_LCD_BG</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdkey_bgon
</UL>

<P><STRONG><a name="[b9]"></a>Reset_Speed_Send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Speed
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>

<P><STRONG><a name="[14a]"></a>Reset_Earth_Send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_wallearth
</UL>

<P><STRONG><a name="[18b]"></a>Reset_L_FrontOnOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[18c]"></a>Reset_L_BackOnOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[18d]"></a>Reset_R_FrontOnOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[18e]"></a>Reset_R_BackOnOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[150]"></a>Reset_HW_Power</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hwincept
</UL>

<P><STRONG><a name="[18f]"></a>Read_Front_Wheel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[3f]"></a>Read_S_Current</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>Read_Key1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardware.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>Read_Key2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardware.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>Read_Key3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardware.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>Read_L_Speed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[3b]"></a>Read_L_LIDI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>Read_Charge_Dc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>Read_Charge_Seat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[191]"></a>Read_R_Speed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[3c]"></a>Read_R_LIDI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>Read_L_HW</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwincept.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>Read_M_HW</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwincept.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>Read_R_HW</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwincept.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>Read_Up_HW</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwincept.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>Read_L_Bump</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>Read_R_Bump</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[192]"></a>Read_LCD_Data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[13f]"></a>init_flash</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[13e]"></a>write_flash</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dui_Telecontrol_ID
</UL>

<P><STRONG><a name="[140]"></a>read_flash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF
</UL>

<P><STRONG><a name="[f2]"></a>Init_WatchDog</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_WatchDog
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[fe]"></a>Init_Mode</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Init_Mode &rArr; Do_Test &rArr; Test_MainBoard &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPMode
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPSpeed
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBKPUV
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>Action_Mode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Action_Mode &rArr; Do_Sweep &rArr; action_bump &rArr; ybs &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Err
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>Turn_UV</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Turn_UV &rArr; WriteWorkState
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
</UL>

<P><STRONG><a name="[1ab]"></a>Change_Speed</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Change_Speed &rArr; WriteWorkState
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_YaoKong_Manage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Docking_YaoKong_Manage
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sweep_YaoKong_Manage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
</UL>

<P><STRONG><a name="[1ad]"></a>Display_Work_Mode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Display_Work_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_display_set
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
</UL>

<P><STRONG><a name="[1ac]"></a>Display_Real</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display_Real &rArr; Display_Work_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Work_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[1ce]"></a>Enable_Sweep</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
</UL>

<P><STRONG><a name="[2a6]"></a>Disable_Sweep</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, function.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>read_bump</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_bump &rArr; stop_rap &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_border
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSeat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongFangXiang
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_bump
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Protect
</UL>

<P><STRONG><a name="[1af]"></a>Read_Protect</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read_Protect &rArr; Init_Err &rArr; Init_Cease &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Protect
</UL>

<P><STRONG><a name="[1b0]"></a>forward</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_road
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
</UL>

<P><STRONG><a name="[1b1]"></a>z_road</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
</UL>

<P><STRONG><a name="[1b2]"></a>back</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = back &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
</UL>

<P><STRONG><a name="[1b3]"></a>right</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = right &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;louxuan
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
</UL>

<P><STRONG><a name="[1b4]"></a>left</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = left &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;louxuan
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
</UL>

<P><STRONG><a name="[1b5]"></a>louxuan</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = louxuan &rArr; left &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
</UL>

<P><STRONG><a name="[11e]"></a>do_action</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;louxuan
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_road
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_border
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSeat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongFangXiang
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_bump
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Protect
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_MainBoard
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Current
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Action
</UL>

<P><STRONG><a name="[1b6]"></a>Action_Protect</STRONG> (Thumb, 1686 bytes, Stack size 40 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Action_Protect &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Protect
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[127]"></a>clr_ram</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Test
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>

<P><STRONG><a name="[1b7]"></a>read_sideearth</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_sideearth &rArr; stop_rap &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_bump
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_earth
</UL>

<P><STRONG><a name="[1b8]"></a>read_earth</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_earth &rArr; read_sideearth &rArr; stop_rap &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sideearth
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_bump
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
</UL>

<P><STRONG><a name="[1cd]"></a>Check_PreengageTime</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_PreengageTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
</UL>

<P><STRONG><a name="[1cf]"></a>Init_Action</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
</UL>

<P><STRONG><a name="[1cc]"></a>Get_Dispower</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[1b9]"></a>AccountCapabilityReal</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AccountCapabilityReal &rArr; WriteBatteryCapability
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBatteryCapability
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFDCap
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountCapability
</UL>

<P><STRONG><a name="[100]"></a>AccountCapability</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AccountCapability &rArr; AccountCapabilityReal &rArr; WriteBatteryCapability
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountCapabilityReal
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>CheckMDustMotor</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckMDustMotor &rArr; Init_Err &rArr; Init_Cease &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M_Motor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Dust_Motor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;account_current
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[1bb]"></a>ybs</STRONG> (Thumb, 3376 bytes, Stack size 40 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ybs &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_earth
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sideearth
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_wall
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border_child
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_border
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_bump
</UL>

<P><STRONG><a name="[1bd]"></a>action_bump</STRONG> (Thumb, 2790 bytes, Stack size 40 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = action_bump &rArr; ybs &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_earth
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sideearth
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
</UL>

<P><STRONG><a name="[1be]"></a>Cease_display_set</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cease.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cease_display_set &rArr; Display_Work_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Work_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
</UL>

<P><STRONG><a name="[198]"></a>Init_Cease</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, cease.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Cease &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Speed_Send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Io_Driver
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_hwincept
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_wall
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_earth
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_YaoKong_Manage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Docking_YaoKong_Manage
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sweep_YaoKong_Manage
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Err
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Protect
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
</UL>

<P><STRONG><a name="[1c0]"></a>Cease_Save_Preengage</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cease.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cease_Save_Preengage &rArr; WritePreengage
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePreengage
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
</UL>

<P><STRONG><a name="[1c5]"></a>Cease_Subb_Time</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cease.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
</UL>

<P><STRONG><a name="[1c4]"></a>Cease_Big_Subb_Time</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cease.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
</UL>

<P><STRONG><a name="[1c3]"></a>Cease_Add_Time</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cease.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
</UL>

<P><STRONG><a name="[1c2]"></a>Cease_Big_Add_Time</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cease.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
</UL>

<P><STRONG><a name="[1c1]"></a>Cease_Timing</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, cease.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Cease_Timing &rArr; AutoDisplay &rArr; lcdkey_disdata
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Driver
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Big_Add_Time
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Add_Time
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Big_Subb_Time
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Subb_Time
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Save_Preengage
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_display_set
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePreengage
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_YaoKong_Manage
</UL>

<P><STRONG><a name="[1c6]"></a>Cease_Save_Time</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cease.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cease_Save_Time &rArr; WriteRtcTime &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRtcTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
</UL>

<P><STRONG><a name="[1c7]"></a>Cease_SetTime</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, cease.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Cease_SetTime &rArr; AutoDisplay &rArr; lcdkey_disdata
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoDisplay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Driver
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Save_Time
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Big_Add_Time
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Add_Time
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Big_Subb_Time
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Subb_Time
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_display_set
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_YaoKong_Manage
</UL>

<P><STRONG><a name="[1ca]"></a>Cease_Lode_Time</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, cease.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cease_Lode_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
</UL>

<P><STRONG><a name="[1c9]"></a>Cease_Lode_Preengage</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cease.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
</UL>

<P><STRONG><a name="[1c8]"></a>Cease_No_Key</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, cease.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cease_No_Key &rArr; Init_Tele &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Driver
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Lode_Preengage
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Lode_Time
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Tele
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Speed
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_UV
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePreengage
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7105_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_YaoKong_Manage
</UL>

<P><STRONG><a name="[1cb]"></a>Cease_YaoKong_Manage</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cease.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Cease_YaoKong_Manage &rArr; Cease_SetTime &rArr; AutoDisplay &rArr; lcdkey_disdata
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_SetTime
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_Timing
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
</UL>

<P><STRONG><a name="[1a1]"></a>Do_Cease</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, cease.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Do_Cease &rArr; Cease_YaoKong_Manage &rArr; Cease_SetTime &rArr; AutoDisplay &rArr; lcdkey_disdata
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_YaoKong_Manage
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_display_set
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dispower
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_PreengageTime
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
</UL>

<P><STRONG><a name="[19a]"></a>Init_Sweep</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, sweep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Sweep &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Speed_Send
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Action
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Sweep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hwincept
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_earth
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_YaoKong_Manage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Docking_YaoKong_Manage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[1d0]"></a>YaoKongFangXiang</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, sweep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = YaoKongFangXiang &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[1d1]"></a>Sweep_YaoKong_Manage</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sweep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sweep_YaoKong_Manage &rArr; Init_Spot &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Err
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[1a2]"></a>Do_Sweep</STRONG> (Thumb, 778 bytes, Stack size 24 bytes, sweep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Do_Sweep &rArr; action_bump &rArr; ybs &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep_Five
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sweep_YaoKong_Manage
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongFangXiang
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_bump
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMDustMotor
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dispower
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Protect
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SensitivityHigh
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SensitivityLow
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_hw_effect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
</UL>

<P><STRONG><a name="[19d]"></a>Init_Docking</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, docking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Docking &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Speed_Send
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Action
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hwincept
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_earth
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_YaoKong_Manage
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sweep_YaoKong_Manage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[1d4]"></a>Docking_YaoKong_Manage</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, docking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Docking_YaoKong_Manage &rArr; Init_Sweep &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
</UL>

<P><STRONG><a name="[1d6]"></a>ReadHwSign</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, docking.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSeat
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
</UL>

<P><STRONG><a name="[1d5]"></a>FindSeat</STRONG> (Thumb, 4220 bytes, Stack size 40 bytes, docking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FindSeat &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHwSign
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_border
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
</UL>

<P><STRONG><a name="[1a5]"></a>Do_Docking</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, docking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Do_Docking &rArr; FindSeat &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSeat
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHwSign
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Docking_YaoKong_Manage
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongFangXiang
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sleep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_PreengageTime
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Protect
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_hw_effect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
</UL>

<P><STRONG><a name="[19b]"></a>Init_Spot</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, spot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Spot &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Speed_Send
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Action
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Sweep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hwincept
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_earth
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Docking_YaoKong_Manage
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sweep_YaoKong_Manage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Chargeing
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[1d7]"></a>Spot_YaoKong_Manage</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, spot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Spot_YaoKong_Manage &rArr; Init_Sweep &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
</UL>

<P><STRONG><a name="[1d8]"></a>read_bump1</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, spot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_bump1 &rArr; stop_rap &rArr; stop
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
</UL>

<P><STRONG><a name="[1a3]"></a>Do_Spot</STRONG> (Thumb, 1054 bytes, Stack size 32 bytes, spot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Do_Spot &rArr; Action_Protect &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep_Five
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump1
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_YaoKong_Manage
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongFangXiang
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMDustMotor
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dispower
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_earth
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sideearth
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Protect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_hw_effect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rap
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
</UL>

<P><STRONG><a name="[19c]"></a>Init_Tele</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tele.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Tele &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Speed_Send
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Action
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Sweep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hwincept
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_earth
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[1a4]"></a>Do_Tele</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, tele.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Do_Tele &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep_Five
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMDustMotor
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dispower
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Speed
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_hw_effect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
</UL>

<P><STRONG><a name="[19e]"></a>Init_Chargeing</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, chargeing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_Chargeing &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Speed_Send
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_hwincept
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_wall
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_earth
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSeat
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[1a6]"></a>Do_Chargeing</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, chargeing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Do_Chargeing &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Speed_Send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Spot
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dispower
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_PreengageTime
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hwincept
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_earth
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeControl
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
</UL>

<P><STRONG><a name="[19f]"></a>Init_Sleep</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sleep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Sleep &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Speed_Send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_hwincept
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_wall
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_earth
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Docking
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[1db]"></a>Disable_KeyIni</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sleep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
</UL>

<P><STRONG><a name="[1d9]"></a>RCC_EXITSTOP</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sleep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EXITSTOP
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
</UL>

<P><STRONG><a name="[1da]"></a>Enable_KeyIni</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sleep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sleep
</UL>

<P><STRONG><a name="[1a7]"></a>Do_Sleep</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, sleep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Do_Sleep &rArr; Init_Chargeing &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Power
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Lcd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReadKey
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Beep
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_KeyIni
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EXITSTOP
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_KeyIni
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sweep
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Chargeing
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountCapabilityReal
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_PreengageTime
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Wall_Send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Earth_Send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_charge
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
</UL>

<P><STRONG><a name="[2a7]"></a>Enable_YaoKongIni</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sleep.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>Disable_YaoKongIni</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sleep.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>Init_Err</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Init_Err &rArr; Init_Cease &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Speed_Send
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBakErr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_hwincept
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_wall
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_earth
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSeat
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Sweep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Spot
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_bump
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMDustMotor
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Protect
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Protect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeControl
</UL>

<P><STRONG><a name="[1a8]"></a>Do_Err</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Do_Err &rArr; Sweep_YaoKong_Manage &rArr; Init_Spot &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sweep_YaoKong_Manage
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
</UL>

<P><STRONG><a name="[1dc]"></a>do_action_border</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, border.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = do_action_border &rArr; FindSeat &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSeat
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bump
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rap
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[1dd]"></a>Init_Border_child</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, border.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Init_Border_child &rArr; ybs &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ybs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Border
</UL>

<P><STRONG><a name="[1a0]"></a>Init_Border</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, border.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Border &rArr; clr_ram &rArr; Init_Io_Driver
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_display
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Speed_Send
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Action
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Sweep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hwincept
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_ram
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_wall
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_earth
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_YaoKong_Manage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Docking_YaoKong_Manage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cease_No_Key
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Tele
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Cease
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
</UL>

<P><STRONG><a name="[1a9]"></a>Do_Border</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, border.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Do_Border &rArr; do_action_border &rArr; FindSeat &rArr; do_action &rArr; z_road &rArr; forward &rArr; enable_rap &rArr; Test_DriveOfWheel &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Beep_Five
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_Driver
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Border_child
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_border
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sweep_YaoKong_Manage
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongFangXiang
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Docking
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cease
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMDustMotor
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dispower
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Protect
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Real
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SensitivityHigh
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SensitivityLow
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_hw_effect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_rap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Mode
</UL>

<P><STRONG><a name="[2a9]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[51]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2ac]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2ad]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[55]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2ae]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2b0]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5e]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[82]"></a>TI1_Config</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMI_Config
</UL>

<P><STRONG><a name="[80]"></a>TI2_Config</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMI_Config
</UL>

<P><STRONG><a name="[7f]"></a>PWMI_Config</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[85]"></a>TI4_Config</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[87]"></a>TI3_Config</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
